rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isSubscribed() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isGoldVaultMember == true;
    }
    
    // Config collection - read-only for all authenticated users
    match /config/{document} {
      allow read: if isAuthenticated();
      allow write: if false; // Only admin SDK can write
    }
    
    // Drops collection - read-only for all authenticated users
    match /drops/{dropId} {
      allow read: if isAuthenticated();
      allow write: if false; // Only admin SDK can write
    }
    
    // User claims - users can only access their own claims
    match /claims/{userId}/drops/{dropId} {
      allow read: if isOwner(userId);
      allow create: if isOwner(userId) && isSubscribed() && 
        request.resource.data.userId == userId &&
        request.resource.data.dropId == dropId &&
        request.resource.data.claimedAt is number;
      allow update, delete: if false; // Claims cannot be modified or deleted
    }
    
    // User inventory - users can only access their own inventory
    match /users/{userId}/inventory/{document} {
      allow read: if isOwner(userId);
      allow write: if false; // Only through Cloud Functions
    }
    
    // User notifications
    match /users/{userId}/notifications/{notificationId} {
      allow read: if isOwner(userId);
      allow update: if isOwner(userId) && 
        request.resource.data.read == true; // Can only mark as read
      allow create, delete: if false;
    }
    
    // User profile and settings
    match /users/{userId} {
      allow read: if isOwner(userId);
      allow update: if isOwner(userId) && 
        // Only allow updating specific fields
        request.resource.data.keys().hasAll(['lastUpdated']) &&
        !request.resource.data.keys().hasAny(['coins', 'isGoldVaultMember', 'inventory']);
      allow create: if isOwner(userId);
      allow delete: if false;
    }
  }
}